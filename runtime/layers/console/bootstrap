#!/opt/bin/php
<?php declare(strict_types=1);

use Bref\Context\Context;
use Bref\Runtime\LambdaRuntime;
use Symfony\Component\Process\Process;

ini_set('display_errors', '1');
error_reporting(E_ALL);

$appRoot = getenv('LAMBDA_TASK_ROOT');

if (getenv('BREF_DOWNLOAD_VENDOR')) {
    if(! file_exists('/tmp/vendor') || ! file_exists('/tmp/vendor/autoload.php')) {
        require_once __DIR__ . '/breftoolbox.php';

        \Bref\ToolBox\BrefToolBox::downloadAndConfigureVendor();
    }

    require '/tmp/vendor/autoload.php';
} elseif (getenv('BREF_AUTOLOAD_PATH')) {
    /** @noinspection PhpIncludeInspection */
    require getenv('BREF_AUTOLOAD_PATH');
} else {
    /** @noinspection PhpIncludeInspection */
    require $appRoot . '/vendor/autoload.php';
}

$customBootstrap = $appRoot . '/lambda_bootstrap.php';
if (file_exists($customBootstrap)) {
    /** @noinspection PhpIncludeInspection */
    require_once $customBootstrap;
}

$lambdaRuntime = LambdaRuntime::fromEnvironmentVariable();

$handlerFile = $appRoot . '/' . getenv('_HANDLER');
if (! is_file($handlerFile)) {
    $lambdaRuntime->failInitialization("Handler `$handlerFile` doesn't exist");
}

while (true) {
    $lambdaRuntime->processNextEvent(function ($event, Context $context) use ($handlerFile): array {
        if (is_array($event)) {
            // Backward compatibility with the former CLI invocation format
            $cliOptions = $event['cli'] ?? '';
        } elseif (is_string($event)) {
            $cliOptions = $event;
        } else {
            $cliOptions = '';
        }

        $timeout = max(1, $context->getRemainingTimeInMillis() / 1000 - 1);
        $command = sprintf('/opt/bin/php %s %s 2>&1', $handlerFile, $cliOptions);
        $process = Process::fromShellCommandline($command, null, ['LAMBDA_INVOCATION_CONTEXT' => json_encode($context)], null, $timeout);

        $process->run(function ($type, $buffer) {
            echo $buffer;
        });

        $exitCode = $process->getExitCode();

        if ($exitCode > 0) {
            throw new Exception('The command exited with a non-zero status code: ' . $exitCode);
        }

        return [
            'exitCode' => $exitCode, // will always be 0
            'output' => $process->getOutput(),
        ];
    });
}

#!/opt/bin/php
<?php declare(strict_types=1);

use Bref\Event\Http\FpmHandler;
use Bref\Runtime\LambdaRuntime;

ini_set('display_errors', '1');
error_reporting(E_ALL);

/**
 * Disable the Bref timeout feature in the main bootstrap process.
 * Indeed it doesn't make sense here because the application code runs in the
 * FPM worker process, not in this process (the bootstrap process). We don't want to
 * terminate the bootstrap process while leaving the FPM worker running.
 * That's why we force `BREF_FEATURE_TIMEOUT` to be disabled.
 */
putenv('BREF_FEATURE_TIMEOUT=0');

$appRoot = getenv('LAMBDA_TASK_ROOT');

if (getenv('BREF_DOWNLOAD_VENDOR')) {
    if(! file_exists('/tmp/vendor') || ! file_exists('/tmp/vendor/autoload.php')) {
        require_once __DIR__ . '/breftoolbox.php';

        \Bref\ToolBox\BrefToolBox::downloadAndConfigureVendor();
    }

    require '/tmp/vendor/autoload.php';
} elseif (getenv('BREF_AUTOLOAD_PATH')) {
    /** @noinspection PhpIncludeInspection */
    require getenv('BREF_AUTOLOAD_PATH');
} else {
    /** @noinspection PhpIncludeInspection */
    require $appRoot . '/vendor/autoload.php';
}

$lambdaRuntime = LambdaRuntime::fromEnvironmentVariable();

$handlerFile = $appRoot . '/' . getenv('_HANDLER');
if (! is_file($handlerFile)) {
    $lambdaRuntime->failInitialization("Handler `$handlerFile` doesn't exist");
}

$phpFpm = new FpmHandler($handlerFile);
try {
    $phpFpm->start();
} catch (\Throwable $e) {
    $lambdaRuntime->failInitialization('Error while starting PHP-FPM', $e);
}

while (true) {
    $lambdaRuntime->processNextEvent($phpFpm);
}

---
AWSTemplateFormatVersion: '2010-09-09'
Description: New Relic Daemon
Parameters:
  OfficeCidr:
    Description: Network access allowed from office CIDR
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 70.184.41.127/32
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid CIDR range of the form x.x.x.x/x.
  WebServerInstanceType:
    Description: WebServer Server EC2 instance type
    Type: String
    Default: t2.small
    AllowedValues:
      - t2.small
      - t2.medium
      - t2.large
    ConstraintDescription: must be a valid EC2 instance type.
  WebServerCount:
    Description: Number of EC2 instances to launch for the WebServer server
    Type: Number
    Default: '1'
  ScaleUpMinutes:
    Description: Number of minutes of high CPU usage before scaling
    Type: Number
    Default: '15'
  sslcert:
    Description: SSL cert arn
    Type: String
    Default: arn:aws:acm:us-west-2:797127384530:certificate/54eb5be7-cbb9-4b32-b7a6-411a1fb0def9
Mappings:
  SubnetConfig:
    VPC:
      CIDR: 10.0.0.0/16
    Public:
      CIDR: 10.0.1.0/24
    Public2:
      CIDR: 10.0.2.0/24
  AWSInstanceType2Arch:
    t2.small:
      Arch: HVM64
    t2.medium:
      Arch: HVM64
    t2.large:
      Arch: HVM64
  AWSInstanceType2NATArch:
    t2.small:
      Arch: NATHVM64
    t2.medium:
      Arch: NATHVM64
    t2.large:
      Arch: NATHVM64
  AWSRegionArch2AMI:
    us-west-1:
      HVM64: ami-09cc4542ec949e70a
    us-west-2:
      HVM64: ami-074650c5dc28a1d2d
    ap-southeast-1:
      HVM64: ami-a59b49c6
    ap-southeast-2:
      HVM64: ami-03371215c58e61cf6
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:
        Fn::FindInMap:
          - SubnetConfig
          - VPC
          - CIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Application
          Value:
            Ref: AWS::StackId
        - Key: Network
          Value: Public
  Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-west-2c
      VpcId:
        Ref: VPC
      CidrBlock:
        Fn::FindInMap:
          - SubnetConfig
          - Public
          - CIDR
      Tags:
        - Key: Application
          Value:
            Ref: AWS::StackId
        - Key: Network
          Value: Public
  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-west-2a
      VpcId:
        Ref: VPC
      CidrBlock:
        Fn::FindInMap:
          - SubnetConfig
          - Public2
          - CIDR
      Tags:
        - Key: Application
          Value:
            Ref: AWS::StackId
        - Key: Network
          Value: Public
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Application
          Value:
            Ref: AWS::StackId
        - Key: Network
          Value: Public
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Application
          Value:
            Ref: AWS::StackId
        - Key: Network
          Value: Public
  Route:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId:
        Ref: RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: Subnet
      RouteTableId:
        Ref: RouteTable
  SubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: Subnet2
      RouteTableId:
        Ref: RouteTable
  NetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Application
          Value:
            Ref: AWS::StackId
        - Key: Network
          Value: Public
  NetworkAclEntry1:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NetworkAcl
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '80'
        To: '80'
  NetworkAclEntry2:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NetworkAcl
      RuleNumber: '101'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '1024'
        To: '65535'
  NetworkAclEntry3:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NetworkAcl
      RuleNumber: '103'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock:
        Ref: OfficeCidr
      PortRange:
        From: '0'
        To: '65535'
  NetworkAclEntry4:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NetworkAcl
      RuleNumber: '104'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '443'
        To: '443'
  NetworkAclEntry5:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NetworkAcl
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'
  SubnetNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: Subnet
      NetworkAclId:
        Ref: NetworkAcl
  SubnetNetworkAclAssociation2:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: Subnet2
      NetworkAclId:
        Ref: NetworkAcl
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      LoadBalancerAttributes:
        #        - Key: access_logs.s3.enabled
        #          Value: true
        #        - Key: access_logs.s3.bucket
        #          Value:
        #            Ref: ElbS3LogBucket
        #        - Key: access_logs.s3.prefix
        #          Value:
        #            Ref: AWS::StackName
        - Key: idle_timeout.timeout_seconds
          Value: 300
      Name:
        Ref: AWS::StackName
      Scheme: internet-facing
      SecurityGroups:
        - Ref: LoadBalancerSecurityGroup
      Subnets:
        - Ref: Subnet
        - Ref: Subnet2
      Tags:
        - Key: Application
          Value:
            Ref: AWS::StackId
      Type: application
  TargetGroupSecure:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: "/"
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: '200'
      Name:
        Fn::Join:
          - ''
          - - Ref: AWS::StackName
            - Secure
      Port: 80
      Protocol: HTTP
      Tags:
        - Key: Application
          Value:
            Ref: AWS::StackId
      UnhealthyThresholdCount: 2
      VpcId:
        Ref: VPC
  TargetGroupInsecure:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: "/"
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: '301'
      Name:
        Fn::Join:
          - ''
          - - Ref: AWS::StackName
            - Insecure
      Port: 8080
      Protocol: HTTP
      Tags:
        - Key: Application
          Value:
            Ref: AWS::StackId

      UnhealthyThresholdCount: 2
      VpcId:
        Ref: VPC
  ListenerHTTPS:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
        - CertificateArn: !Ref sslcert
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: TargetGroupSecure
      LoadBalancerArn:
        Ref: LoadBalancer
      Port: 443
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-TLS-1-2-Ext-2018-06
  ListenerHTTP:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: TargetGroupInsecure
      LoadBalancerArn:
        Ref: LoadBalancer
      Port: 80
      Protocol: HTTP
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: LoadBalancer Security Group with HTTP/S access from the internet
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '31339'
          ToPort: '31339'
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: '0'
          ToPort: '65535'
          CidrIp: 0.0.0.0/0
  WebServerFleet:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: Route
    Properties:
      AvailabilityZones:
        - Fn::GetAtt:
            - Subnet2
            - AvailabilityZone
      VPCZoneIdentifier:
        - Ref: Subnet2
      LaunchConfigurationName:
        Ref: LaunchConfiguration
      MinSize: '1'
      MaxSize: '2'
      DesiredCapacity:
        Ref: WebServerCount
      Cooldown: '30'
      Tags:
        - Key: Network
          Value: Public
          PropagateAtLaunch: true
      TargetGroupARNs:
        - Ref: TargetGroupSecure
        - Ref: TargetGroupInsecure
      TerminationPolicies:
        - OldestInstance
  ScaleUp2Policy:
    Type: AWS::AutoScaling::ScalingPolicy
    Metadata:
      Region:
        Ref: AWS::Region
      Stack:
        Ref: AWS::StackName
      Type: frontend
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName:
        Ref: WebServerFleet
      Cooldown: '30'
      ScalingAdjustment: '2'
  ScaleDown40PctPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Metadata:
      Region:
        Ref: AWS::Region
      Stack:
        Ref: AWS::StackName
      Type: frontend
    Properties:
      AdjustmentType: PercentChangeInCapacity
      AutoScalingGroupName:
        Ref: WebServerFleet
      Cooldown: '2700'
      ScalingAdjustment: "-40"
  #  NoHealthyHostsAlarm:
  #    Type: AWS::CloudWatch::Alarm
  #    Metadata:
  #      Region:
  #        Ref: AWS::Region
  #      Stack:
  #        Ref: AWS::StackName
  #      Type: frontend
  #    Properties:
  #      EvaluationPeriods: '2'
  #      Statistic: Sum
  #      Threshold: '1'
  #      AlarmDescription: No healthy hosts
  #      Period: '120'
  #      AlarmActions:
  #        - Ref: AlarmTopic
  #      Namespace: AWS/LB
  #      Dimensions:
  #        - Name: LoadBalancerName
  #          Value:
  #            Ref: LoadBalancer
  #      ComparisonOperator: LessThanThreshold
  #      MetricName: HealthyHostCount
  FrontendCPU65Alarm:
    Type: AWS::CloudWatch::Alarm
    Metadata:
      Region:
        Ref: AWS::Region
      Stack:
        Ref: AWS::StackName
      Type: frontend
    Properties:
      EvaluationPeriods:
        Ref: ScaleUpMinutes
      Statistic: Average
      Threshold: '65'
      AlarmDescription: Frontend average CPU higher than 65 percent
      Period: '60'
      AlarmActions:
        - Ref: ScaleUp2Policy
      Namespace: AWS/EC2
      Dimensions:
        - Name: AutoScalingGroupName
          Value:
            Ref: WebServerFleet
      ComparisonOperator: GreaterThanOrEqualToThreshold
      MetricName: CPUUtilization
  FrontendCpu40Alarm:
    Type: AWS::CloudWatch::Alarm
    Metadata:
      Region:
        Ref: AWS::Region
      Stack:
        Ref: AWS::StackName
      Type: frontend
    Properties:
      EvaluationPeriods: '30'
      Statistic: Average
      Threshold: '40'
      AlarmDescription: Frontend average CPU less than 40 percent
      Period: '60'
      AlarmActions:
        - Ref: ScaleDown40PctPolicy
      Namespace: AWS/EC2
      Dimensions:
        - Name: AutoScalingGroupName
          Value:
            Ref: WebServerFleet
      ComparisonOperator: LessThanOrEqualToThreshold
      MetricName: CPUUtilization
  AlarmTopic:
    Type: AWS::SNS::Topic
    Metadata:
      Region:
        Ref: AWS::Region
      Stack:
        Ref: AWS::StackName
      Type: frontend
    Properties:
      Subscription:
        - Endpoint: support@clariondoor.com
          Protocol: email
  IamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies: []
      Description: EC2 IAM role for SSM access
  Ec2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: IamRole
  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      Region:
        Ref: AWS::Region
      Stack:
        Ref: AWS::StackName
      Type: frontend
    Properties:
      IamInstanceProfile:
        Ref: Ec2InstanceProfile
      ImageId:
        Fn::FindInMap:
          - AWSRegionArch2AMI
          - Ref: AWS::Region
          - Fn::FindInMap:
              - AWSInstanceType2Arch
              - Ref: WebServerInstanceType
              - Arch
      SecurityGroups:
        - Ref: WebServerSecurityGroup
      InstanceType:
        Ref: WebServerInstanceType
      AssociatePublicIpAddress: 'true'
      UserData:
        Fn::Base64:
          Fn::Join:
            - "\n"
            - - "#!/bin/bash -ex"
              - exec > >(tee /tmp/init.log|logger -t user-data -s 2>/dev/console) 2>&1
              - export HOME=/root
              - cd /root
              - git clone git@github.com:cdins/clariondoor.git
              - /root/clariondoor/error_pages/nginx-install.sh
              - mkdir -p /var/run/newrelic
              - chmod o+w /var/run/newrelic
              - rm -rf /var/www/html
              - cd /var/www
              - mkdir html
              - echo "Portal NR Daemon" > html/index.php
              - /root/clariondoor/tools/newrelic/ignore-elb-login.sh
              - chown -R nginx:nginx /var/www/html
              - cp /root/clariondoor/nginx/flows.conf /etc/nginx/conf.d/
              - rm -rf /root/clariondoor
              - sed -i 's/\$SERVER_NAME\$/portal-newrelic.clariondoor.com/' /etc/nginx/conf.d/flows.conf
              - sed -i 's/var\/www\/html\/web/var\/www\/html/' /etc/nginx/conf.d/flows.conf
              - sed -i 's/app.php/index.php/' /etc/nginx/conf.d/flows.conf
              - service nginx restart
              - sed -i 's/\$ENVIRONMENT\$/portal-newrelic/' /etc/rsyslog.d/*.conf
              - service rsyslog restart
              - sed -i -e 's/PHP Application/Quoting Portal/g' /etc/php.d/newrelic.ini
              - service php-fpm restart
              - curl -L https://download.newrelic.com/php_agent/release/newrelic-php5-9.11.0.267-linux.tar.gz | tar -C /tmp -zx
              - NR_INSTALL_SILENT=1
              - /tmp/newrelic-php5-*/newrelic-install install_daemon
              - rm -rf /tmp/newrelic-php5-* /tmp/nrinstall*
              - /usr/bin/newrelic-daemon --address=portal-newrelic.clariondoor.com:31339  --watchdog-foreground
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow access from load balancer and bastion as well as outbound HTTP and HTTPS traffic
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp:
            Ref: OfficeCidr
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId:
            Ref: LoadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp:
            Ref: OfficeCidr
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId:
            Ref: LoadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: 31339
          ToPort: 31339
          SourceSecurityGroupId:
            Ref: LoadBalancerSecurityGroup
  Route53RecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: portal-newrelic.clariondoor.com
      HostedZoneName: clariondoor.com.
      Type: A
      AliasTarget:
        HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID
        DNSName: !GetAtt LoadBalancer.DNSName

Outputs:
  WebSite:
    Description: LoadBalancer DNS
    Value:
      Fn::Join:
        - ''
        - - http://
          - Fn::GetAtt:
              - LoadBalancer
              - DNSName
